# ---------------------------------------------------------------------------
# x.py
# Created on: Tue Feb 15 2011 08:32:55 AM
#   (generated by ArcGIS/ModelBuilder)
# ---------------------------------------------------------------------------
#this code is perfect for updating the percent overlap, but not so great for
#updating the land use types of the data.  This could be used as the input
#method for creating the land use tables:  The cut up areas could be counted
#and applied to the grid layer one at a time.
# Import system modules
import sys, string, os, arcpy#arcgisscripting
from arcpy import env
# Define Functions
# Field_Exists
#   Returns 1 if field can be found; returns 0 if field or layer does not exist
def Field_DoesntExist(layer_name, field_name):
    if arcpy.Exists(layer_name):
        if len(arcpy.ListFields(layer_name, field_name))<> 0:
            return 0 # Field exists
        else:
            return 1 # Field does not exist
    else:
        return 2 # Layer does not exist

# Create the Geoprocessor object


# Load required toolboxes...
#arcpy.AddToolbox("C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Analysis Tools.tbx")
arcpy.OverWriteOutput = True
arcpy.env.workspace = "Database Connections\\GRID_CONDITIONING.GIS.sde"# (VERSION:DBO.DEFAULT)"
#===========================================
fcList = arcpy.ListFeatureClasses()
#for fc in fcList:
#    arcpy.AddMessage(fc)
#===========================================    
# Local variables...
#Boundaries_Select should be a user-identified file, not hard-coded
#The boundaries indicated here are the ones I made and put in SQL server
GRID_CONDITIONING_GIS_theOutput = "Database Connections\\GRID_CONDITIONING.GIS.sde\\GRID_CONDITIONING.GIS.theOutputIMP"
Boundaries_Select = "theOutputIMP_Dis"#sys.argv[1]
# Process: Dissolve
if arcpy.Exists("Database Connections\\GRID_CONDITIONING.GIS.sde\\GRID_CONDITIONING.GIS.theOutputIMP_Dis"):
    arcpy.Delete_management("Database Connections\\GRID_CONDITIONING.GIS.sde\\GRID_CONDITIONING.GIS.theOutputIMP_Dis", "")
arcpy.Dissolve_management(GRID_CONDITIONING_GIS_theOutput, "Database Connections\\GRID_CONDITIONING.GIS.sde\\GRID_CONDITIONING.GIS.theOutputIMP_Dis", "LUType", "", "MULTI_PART", "DISSOLVE_LINES")
#===========================================

#===========================================
#The EmptyGrid should be hard coded, but should come from sql server, not a file geodatabase
#The EmptyGrid indicated here should be the 10 ft cells I made for Stephens Creek
IFI = "BasicGrid_ClipIMP"
#===========================================

#===========================================
#This column should be user identified
#These columns are probably just LAND_USE types
WLayerF = "LUType"
#===========================================

#Check to make sure the boundaries layer has "area" and "sub_area" fields
#This should be changed to LAND_USE_TYPE
Result = Field_DoesntExist(Boundaries_Select, "LUtype")
if (Result == 0) :
    #============================================
    #This section just backs up the grid table and the boundaries table
    #============================================
    if arcpy.Exists("theGridIMP"):
            arcpy.Delete_management("theGridIMP", "")
    arcpy.Copy_management(IFI, "theGridIMP")
    
    #arcpy.AddMessage("backed up grid table")
    if arcpy.Exists("gridBoundariesIMP"):
            arcpy.Delete_management("gridBoundariesIMP", "")
    arcpy.Copy_management(Boundaries_Select, "gridBoundariesIMP")
    #arcpy.AddMessage("backed up boundaries table")
    #arcpy.Update
    #============================================
    
    #============================================
    #This section adds and updates the area fields of the Grid cells
    #============================================
    arcpy.AddField_management("theGridIMP", "Area_ft2", "FLOAT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management("theGridIMP" , "Area_ft2", "float(!shape.area!)", "PYTHON", "#")
    arcpy.AddField_management("theGridIMP", "SourceObjectID", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
    arcpy.CalculateField_management("theGridIMP" , "SourceObjectID", "long(!OBJECTID!)", "PYTHON", "#")
    #============================================
    
    #We cannot expect the server to be clean of previous runs
    #So we have to remove any 'O' style tables from the database.
    #========================================================
    #fcs = arcpy.ListFeatureClasses()
    #for fc in fcs:
    #    #if the name of the fc starts with an O, then delete from the server, otherwise, skip
    #    #arcpy.AddMessage(fc)
    #    if fc.split('.')[2][0] == "O":
    #        arcpy.Delete_management(fc, "")
    #        print "Deleted " + fc
    #========================================================

    #Get the set of variables that will be used:
    #the set of rows, the number of different kinds of land use areas
    Wrows = arcpy.SearchCursor(Boundaries_Select)
    Wrow = Wrows.next()
    Nfeatures = str(arcpy.GetCount_management(Boundaries_Select))
    #arcpy.AddMessage(Nfeatures + " Records to Process")
    arcpy.ClusterTolerance = 0.1

    while  Wrow:
        WFValue = str(Wrow.LUType)
        if WFValue == "IMP":
            print WFValue
            #arcpy.AddMessage("Processing Land Use Area " + str(Wrow.LUType))
            
            #create a layer that has only the current land use boundary object in it
            #==================================================================================
            arcpy.MakeFeatureLayer_management(Boundaries_Select, "thelyr", "\"LUType\"= '"+str(Wrow.LUType)+"'")
            #arcpy.Update
            #arcpy.AddMessage("prepping layer " +str(Wrow.OBJECTID))
            #==================================================================================
            
            #cut the grid with the land use layer
            #===================================================================
            arcpy.Clip_analysis("theGridIMP", "thelyr", "O" + str(Wrow.LUType) , "")
            #===================================================================
            
            # Process: Add Fields...
            #=============================================================================
            arcpy.AddField_management("O" + str(Wrow.LUType), "area_", "TEXT", "", "", "256", "", "NULLABLE", "NON_REQUIRED", "")
            arcpy.AddField_management("O" + str(Wrow.LUType), "theFrac", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
            #=============================================================================

            #Calculate the fraction and update the output layer
            #=============================================================================
            arcpy.CalculateField_management("O" + str(Wrow.LUType) , "area_", "'" + WFValue + "'", "PYTHON", "#")
            #because the clip_analysis function can AND DOES cause some grid cells to
            #have a larger than 10,000ft^2 area, 'theFrac' needs to be checked
            #again using sql, and those values that are greater than 1.0 should
            #be made apparent to the user.  This is a red herring, but hey,
            #We just split like a million polygons.
            arcpy.CalculateField_management("O" + str(Wrow.LUType) , "theFrac", "(float(!shape.area!))/!Area_ft2!", "PYTHON", "#")

            arcpy.Delete_management("thelyr")
        Wrow = Wrows.next()
    
else:
    if (Result == 1) :
        variablex = 1
        #arcpy.AddMessage("Boundaries table does not have an 'LUType' field")
    if (Result == 2) :
        variablez = 1
        #arcpy.AddMessage("Boundaries table does not exist")




